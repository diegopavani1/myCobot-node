name: Publish to NPM

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Install dependencies
      run: npm ci
      
    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Auto-increment version
      id: version
      run: |
        # Get current version
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        
        # Check if this version already exists on npm
        if npm view mycobot-node@$CURRENT_VERSION version >/dev/null 2>&1; then
          echo "Version $CURRENT_VERSION exists on npm, auto-incrementing..."
          npm version patch --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          
          # Commit version change
          git add package.json package-lock.json
          git commit -m "chore: bump version to v$NEW_VERSION [skip ci]"
          
          # Create and push tag
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"
          
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version-changed=true" >> $GITHUB_OUTPUT
        else
          echo "Version $CURRENT_VERSION is new, using as-is"
          echo "new-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "version-changed=false" >> $GITHUB_OUTPUT
        fi
      
    - name: Build project
      run: npm run build
        
    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.new-version }}
        name: Release v${{ steps.version.outputs.new-version }}
        body: |
          ## 🚀 Release v${{ steps.version.outputs.new-version }}
          
          Auto-generated release with automated versioning.
          
          ### 📦 Installation
          ```bash
          npm install mycobot-node@${{ steps.version.outputs.new-version }}
          ```
          
          ### 📚 Documentation
          - [README.md](https://github.com/diegopavani1/mycobot-controller#readme)
          - [API Documentation](https://github.com/diegopavani1/mycobot-controller/blob/main/README.md#api)
          - [Examples](https://github.com/diegopavani1/mycobot-controller/tree/main/src/examples)
          
          ### 🔧 What's Changed
          - Automated version bump to v${{ steps.version.outputs.new-version }}
          - Latest bug fixes and improvements
          - Full compatibility with myCobot 280 M5
          
          **Full Changelog**: https://github.com/diegopavani1/mycobot-controller/compare/v${{ steps.version.outputs.new-version }}...HEAD
        draft: false
        prerelease: false
        
    - name: Summary
      run: |
        echo "🎉 Successfully published v${{ steps.version.outputs.new-version }}!"
        echo "📦 NPM: https://www.npmjs.com/package/mycobot-node"
        echo "🏷️ GitHub Release: https://github.com/diegopavani1/mycobot-controller/releases/tag/v${{ steps.version.outputs.new-version }}"
